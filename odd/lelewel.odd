<?xml-model href="teipublisher_odds.xsd"?><TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Lelewel Letters</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="lelewel.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-03-01Z">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="lelewel" source="teipublisher.odd"> <elementSpec ident="pb" mode="change">
                    <model predicate="@facs" behaviour="webcomponent">
            <param name="name" value="'pb-facs-link'"/>
            <param name="facs" value="@facs"/>
            <param name="label" value="@n"/>
            <param name="emit" value="'transcription'"/>
        </model>
                    <model predicate="starts-with(@facs, 'iiif:')" behaviour="webcomponent">
            <param name="facs" value="replace(@facs, '^iiif:(.*)$', '$1')"/>
            <param name="emit" value="'transcription'"/>
            <param name="name" value="'pb-facs-link'"/>
            <param name="label" value="'foo'"/>
        </model>
                    <model behaviour="break" useSourceRendition="true">
            <param name="type" value="'page'"/>
            <param name="label" value="(concat(if(@n) then concat(@n,' ') else '',if(@facs) then                   concat('@',@facs) else ''))"/>
            <outputRendition xml:space="preserve">
            display: block; margin-left: 4pt; color: grey; float: right;
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            content: '[Page ';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: ']';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="app" mode="add">
                    <model behaviour="alternate">
            <param name="default" value="lem"/>
            <param name="alternate" value="rdg"/>
        </model>
                </elementSpec>
            <elementSpec ident="lb" mode="change">
                    <modelSequence predicate="@break">
            <model behaviour="inline" cssClass="lb-hyphen">
                <param name="content" value="'-'"/>
            </model>
            <model behaviour="break" cssClass="lb">
                <param name="type" value="'line'"/>
                <param name="label" value="@n"/>
            </model>
        </modelSequence>
                    <model behaviour="break" cssClass="lb" useSourceRendition="true">
            <param name="type" value="'line'"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
            <elementSpec ident="persName" mode="add">
                    <model behaviour="inline" cssClass="index person"/>
                </elementSpec>
                <elementSpec ident="placeName" mode="add">
                    <model behaviour="inline" cssClass="index place"/>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="@type=&#34;pwn&#34;" behaviour="link" cssClass="ref-pwn">
            <param name="uri" value="@target"/>
            <param name="target" value="'_blank'"/>
        </model>
                    <model predicate="@type=&#34;lelewel&#34;" behaviour="link" cssClass="ref-lelewel">
            <param name="uri" value="@target"/>
            <param name="target" value="'_blank'"/>
        </model>
                    <model predicate="not(@target)" behaviour="inline"/>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
        <model predicate="orig and seg" behaviour="alternate">
            <param name="default" value="orig"/>
            <param name="alternate" value="seg"/>
        </model>
        <model output="plain" predicate="sic and corr" behaviour="inline">
            <param name="content" value="corr[1]"/>
        </model>
        <model output="plain" predicate="abbr and expan" behaviour="inline">
            <param name="content" value="expan[1]"/>
        </model>
        <model output="plain" predicate="orig and reg" behaviour="inline">
            <param name="content" value="reg[1]"/>
        </model>
        <model predicate="sic and corr" behaviour="alternate">
            <param name="default" value="corr[1]"/>
            <param name="alternate" value="sic[1]"/>
        </model>
        <model predicate="abbr and expan" behaviour="alternate">
            <param name="default" value="expan[1]"/>
            <param name="alternate" value="abbr[1]"/>
        </model>
        <model predicate="orig and reg" behaviour="alternate">
            <param name="default" value="reg[1]"/>
            <param name="alternate" value="orig[1]"/>
        </model>
    </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>