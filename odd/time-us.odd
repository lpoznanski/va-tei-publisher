<?xml-model href="teipublisher_odds.xsd"?><TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en"><teiHeader><fileDesc>
            <titleStmt><title>ODD_TIMEUS</title></titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref></p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc><encodingDesc><tagsDecl/></encodingDesc><revisionDesc>
            <change when="2021-05-03+02:00">Initial version</change>
        </revisionDesc></teiHeader><text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="ODD_TIMEUS" source="teipublisher.odd"> <elementSpec ident="body" mode="change"><modelSequence>
            <model behaviour="index">
                <param name="type" value="'toc'"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence></elementSpec><elementSpec ident="editor" mode="change"><model predicate="ancestor::teiHeader" behaviour="omit"/><model behaviour="inline"/></elementSpec><elementSpec ident="milestone" mode="change"><model behaviour="inline"/></elementSpec><elementSpec ident="p" mode="change"><model predicate="parent::publicationStmt" behaviour="inline"/><model behaviour="paragraph" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            text-align: justify;
            </outputRendition>
        </model></elementSpec><elementSpec ident="pb" mode="change"><model behaviour="omit" useSourceRendition="true">
            <param name="type" value="'page'"/>
            <param name="label" value="(concat(if(@n) then concat(@n,' ') else '',if(@facs) then                   concat('@',@facs) else ''))"/>
        </model></elementSpec><elementSpec ident="TEI" mode="change"><model behaviour="document"/></elementSpec><elementSpec ident="text" mode="change"><model behaviour="body">
            <param name="content" value="(root(.)//entities, .)"/>
        </model></elementSpec><elementSpec ident="title" mode="change"><model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model><modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' â€” '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence><model predicate="not(@level) and parent::bibl" behaviour="inline"/><modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence><modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence><modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence><model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model></elementSpec><elementSpec ident="respStmt" mode="add"><model predicate="$parameters?mode=&#34;metadata&#34;" behaviour="inline">
            <param name="task" value="resp"/>
            <param name="person" value="name"/>
            <pb:template xmlns="" xml:space="preserve"><li>[[task]] : [[person]]</li></pb:template>
        </model></elementSpec><elementSpec ident="teiHeader" mode="change"><model output="web" predicate="$parameters?header='short'" behaviour="block"/><modelSequence predicate="$parameters?mode=&#34;metadata&#34;">
            <model behaviour="block">
                <param name="content" value="fileDesc/sourceDesc/p/idno[@type='URI']"/>
                <pb:template xmlns="" xml:space="preserve"><a href="[[content]]" target="_blank">Facsimile</a></pb:template>
            </model>
            <model behaviour="block">
                <param name="content" value="fileDesc/titleStmt/editor/text()"/>
                <pb:template xmlns="" xml:space="preserve">Editor : [[content]]</pb:template>
            </model>
            <model behaviour="text">
                <pb:template xmlns="" xml:space="preserve">Responsables :</pb:template>
            </model>
            <model behaviour="inline">
                <param name="content" value="fileDesc/titleStmt/respStmt"/>
                <pb:template xmlns="" xml:space="preserve"><ul>[[content]]</ul></pb:template>
            </model>
        </modelSequence><model predicate="$parameters?mode='title'" behaviour="inline">
            <param name="content" value="(fileDesc/titleStmt/title[1])"/>
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model><model output="latex" behaviour="metadata"/><model output="fo" behaviour="omit"/><model output="web" behaviour="metadata"/></elementSpec><elementSpec ident="idno" mode="add"/><elementSpec ident="titleStmt" mode="change"><model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model><model output="fo" behaviour="heading"/><model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model><modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="editor"/>
            </model>
        </modelSequence><model output="web" behaviour="block"/></elementSpec><elementSpec ident="sourceDesc" mode="add"><model predicate="$parameters?header='short'" behaviour="link" cssClass="header-short">
            <param name="content" value="&#34;Facsimile&#34;"/>
            <param name="uri" value="p/idno[@type=&#34;URI&#34;]"/>
            <param name="target" value="&#34;_blank&#34;"/>
        </model></elementSpec><elementSpec ident="fileDesc" mode="change"><modelSequence predicate="$parameters?header='short'">
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="titleStmt"/>
                <outputRendition xml:space="preserve">
                margin: 0;
                </outputRendition>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="sourceDesc"/>
                <outputRendition xml:space="preserve">
                margin: 0;
                </outputRendition>
            </model>
            <model behaviour="block" cssClass="header-short">
                <param name="content" value="publicationStmt"/>
                <outputRendition xml:space="preserve">
                margin: 0;
                </outputRendition>
            </model>
        </modelSequence><model behaviour="title">
            <param name="content" value="titleStmt"/>
        </model></elementSpec><elementSpec ident="publicationStmt" mode="change"><model output="web" predicate="$parameters?header='short'" behaviour="block">
            <param name="content" value="p"/>
        </model><model output="web" behaviour="block">
            <param name="content" value="availability/licence"/>
        </model><model behaviour="omit"/></elementSpec><elementSpec ident="entity" mode="add"/><elementSpec ident="w" mode="change"><model behaviour="inline">
            <param name="content" value="."/>
            <param name="id" value="@xml:id"/>
            <param name="type" value="let $i:=@xml:id  let $pattern:=concat('#', $i, &#34;(\s|$)&#34;) return root(.)/TEI/standOff/entities//span[matches(@target, $pattern)]/../../@type"/>
            <param name="name" value="let $i:=@xml:id  let $pattern:=concat('#', $i, &#34;(\s|$)&#34;) return root(.)/TEI/standOff/entities//span[matches(@target, $pattern)]/../../@name"/>
            <param name="kind" value="let $i:=@xml:id  let $pattern:=concat('#', $i, &#34;(\s|$)&#34;) return root(.)/TEI/standOff/concepts//span[matches(@target, $pattern)]/../../@kind"/>
            <param name="gender" value="let $i:=@xml:id  let $pattern:=concat('#', $i, &#34;(\s|$)&#34;) return root(.)/TEI/standOff/entities//span[matches(@target, $pattern)]/../../@gender"/>
            <pb:template xmlns="" xml:space="preserve"><token name="[[name]]" type="[[type]]" kind="[[kind]]" gender="[[gender]]" id="[[id]]">[[content]]</token></pb:template>
        </model></elementSpec><elementSpec ident="entities" mode="add"/><elementSpec ident="spanGrp" mode="add"/><elementSpec ident="span" mode="add"/></schemaSpec>
        </body>
    </text></TEI>